(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{419:function(t,a,l){"use strict";l.r(a);var s=l(55),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,l=t._self._c||a;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"基础"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),l("h2",{attrs:{id:"类-class-和结构体-struct-有什么区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#类-class-和结构体-struct-有什么区别"}},[t._v("#")]),t._v(" 类（class）和结构体（struct）有什么区别")]),t._v(" "),l("p",[t._v('类是引用类型，结构体是值类型。值类型在传递和赋值时将进行复制，而引用类型则只会使用引用对象的一个"指向"。')]),t._v(" "),l("p",[t._v("class优点")]),t._v(" "),l("ul",[l("li",[l("ol",[l("li",[t._v("可以继承，可以使用父类的特性和方法")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"2"}},[l("li",[t._v("类型转换可以在runtime的时候检查和解释一个实例的类型")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"3"}},[l("li",[t._v("可以用deinit来释放资源")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"4"}},[l("li",[t._v("一个类可以被多次引用")])])])]),t._v(" "),l("p",[t._v("struct优点：")]),t._v(" "),l("ul",[l("li",[l("ol",[l("li",[t._v("结构较小，适用于复制操作，相比于一个class的实例被多次引用更加安全。")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"2"}},[l("li",[t._v("无须担心内存memory leak或者多线程冲突问题")])])])]),t._v(" "),l("h2",{attrs:{id:"nsstring类型为什么要用copy修饰"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#nsstring类型为什么要用copy修饰"}},[t._v("#")]),t._v(" NSString类型为什么要用copy修饰")]),t._v(" "),l("ul",[l("li",[l("ol",[l("li",[t._v("主要是防止NSString被修改，如果没有修改的话用strong也行。")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"2"}},[l("li",[t._v("当NSString的赋值来源是NSString时：strong和copy作用相同。")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"3"}},[l("li",[t._v("当NSString的赋值来源是NSMutableString：copy会做深拷贝，重新生成一个新的对象，修改赋值来源不会影响NSString的值。strong是浅拷贝，修改赋值会影响NSString的值。")])])])]),t._v(" "),l("h2",{attrs:{id:"assign修饰对象类型会怎样"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#assign修饰对象类型会怎样"}},[t._v("#")]),t._v(" assign修饰对象类型会怎样")]),t._v(" "),l("ul",[l("li",[t._v("assign修饰基本数据类型或结构体，因为基本数据类型是分配在栈上的，由系统分配和释放，所以不会造成野指针。")]),t._v(" "),l("li",[t._v("如果修饰对象的话，当销毁时，属性值不会自动置nil，可能造成野指针。")])]),t._v(" "),l("h2",{attrs:{id:"深拷贝-mutablecopy-与浅拷贝-copy"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝-mutablecopy-与浅拷贝-copy"}},[t._v("#")]),t._v(" 深拷贝(mutableCopy)与浅拷贝(copy)")]),t._v(" "),l("p",[t._v("只有不可变对象调用copy方法时是浅拷贝，其他情况都为深拷贝\n自定义类如果需要copy操作，需要两步")]),t._v(" "),l("ul",[l("li",[l("ol",[l("li",[t._v("让类实现NSCopying/NSMutableCopying协议。")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"2"}},[l("li",[t._v("让类实现copyWithZone: / mutableCopyWithZone:方法")])])])]),t._v(" "),l("h2",{attrs:{id:"被weak修饰的对象在被释放的时候会发生什么-是如何实现的"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#被weak修饰的对象在被释放的时候会发生什么-是如何实现的"}},[t._v("#")]),t._v(" 被weak修饰的对象在被释放的时候会发生什么？是如何实现的？")]),t._v(" "),l("p",[t._v("Runtime维护了一个weak表，用于存储指向某个对象的所有weak指针。weak表其实是一个hash（哈希）表，Key是所指对象的地址，Value是weak指针的地址（这个地址的值是所指对象指针的地址）数组。\n释放时，调用clearDeallocating函数，先根据对象地址获取所有weak指针地址的数组，然后遍历这个数组把其中的数据设为nil，最后把这个对象从weak表中删除，清理对象的记录。")]),t._v(" "),l("h2",{attrs:{id:"分类和扩展的区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#分类和扩展的区别"}},[t._v("#")]),t._v(" 分类和扩展的区别")]),t._v(" "),l("ul",[l("li",[t._v("分类：用来为某个类添加方法、属性、协议，一般为系统的类扩展方法或者把某个复杂的类按照功能拆分到不同的文件中")]),t._v(" "),l("li",[t._v("扩展：用来为某个类添加方法、属性、成员变量。(方法只是声明，不能实现)")])]),t._v(" "),l("p",[t._v("区别：")]),t._v(" "),l("ul",[l("li",[l("ol",[l("li",[t._v("分类在运行时把分类信息合并到类信息中，扩展是在编译时，把信息合并到类中")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"2"}},[l("li",[t._v("分类声明的属性，只会生成getter/setter方法的声明，不会自动生成成员变量和getter/setter方法的实现。而扩展会")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"3"}},[l("li",[t._v("分类不能为类添加实例变量，而扩展可以")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"4"}},[l("li",[t._v("分类可以为类添加方法的实现，而扩展只能声明方法，不能实现")])])])]),t._v(" "),l("h2",{attrs:{id:"setneedslayout和layoutifneeded区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#setneedslayout和layoutifneeded区别"}},[t._v("#")]),t._v(" setNeedsLayout和layoutIfNeeded区别")]),t._v(" "),l("p",[t._v("setNeedsLayout")]),t._v(" "),l("ul",[l("li",[t._v("标记为需要重新布局，异步调用layoutIfNeeded刷新布局，不立即刷新，在下一轮runloop结束前刷新，对于这一轮runloop之内的所有布局和UI上的更新只会刷新一次，layoutSubviews一定会被调用。")])]),t._v(" "),l("p",[t._v("layoutIfNeeded")]),t._v(" "),l("ul",[l("li",[t._v("如果有需要刷新的标记，立即调用layoutSubviews进行布局（如果没有标记，不会调用layoutSubviews）。\n关键点")])]),t._v(" "),l("p",[t._v("layoutIfNeeded不一定会调用layoutSubviews方法。\nsetNeedsLayout一定会调用layoutSubviews方法（有延迟，在下一轮runloop结束前）。")]),t._v(" "),l("h2",{attrs:{id:"main-之前的过程有哪些"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#main-之前的过程有哪些"}},[t._v("#")]),t._v(" main()之前的过程有哪些")]),t._v(" "),l("ul",[l("li",[l("ol",[l("li",[t._v("动态库的加载")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"2"}},[l("li",[t._v("rebase/rebinding(偏移修正/符号绑定)")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"3"}},[l("li",[t._v("ObjC setup：runtime运行时初始化")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"4"}},[l("li",[t._v("load函数的加载")])])])]),t._v(" "),l("h2",{attrs:{id:"哪些情况会导致app崩溃-分别可以用什么方法拦截并化解"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#哪些情况会导致app崩溃-分别可以用什么方法拦截并化解"}},[t._v("#")]),t._v(" 哪些情况会导致app崩溃，分别可以用什么方法拦截并化解")]),t._v(" "),l("ul",[l("li",[l("ol",[l("li",[t._v("可变容器中加入nil。可以替换容器添加方法，进行判断")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"2"}},[l("li",[t._v("数组越界、字符串截取越界")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"3"}},[l("li",[t._v("找不到对应的函数")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"4"}},[l("li",[t._v("各系统版本间的差异。可以先判断系统版本，做不同的处理。")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"5"}},[l("li",[t._v("野指针")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"6"}},[l("li",[t._v("NSTimer定时器，需要在合适的时机invalidate 定时器")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"7"}},[l("li",[t._v("KVO，需要再dealloc中反注册KVO")])])])]),t._v(" "),l("h2",{attrs:{id:"ios内存分区"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#ios内存分区"}},[t._v("#")]),t._v(" iOS内存分区")]),t._v(" "),l("p",[l("a",{attrs:{href:"https://www.jianshu.com/p/c448a4b4cfd8",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.jianshu.com/p/c448a4b4cfd8"),l("OutboundLink")],1)]),t._v(" "),l("ul",[l("li",[t._v("栈区、堆区、全局区/静态区、常量区、代码区")])]),t._v(" "),l("h2",{attrs:{id:"僵尸对象、野指针、空指针是什么"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#僵尸对象、野指针、空指针是什么"}},[t._v("#")]),t._v(" 僵尸对象、野指针、空指针是什么？")]),t._v(" "),l("ul",[l("li",[t._v("僵尸对象：已经被销毁的对象（xcode 中默认不实时检查僵尸对象）")]),t._v(" "),l("li",[t._v("野指针：指向僵尸对象（不可用的内存）的指针")]),t._v(" "),l("li",[t._v("空指针：没有指向存储空间的的指针（里面存的是nil, 也就是0）,给空指针发消息不会有任何反应。")])]),t._v(" "),l("h2",{attrs:{id:"自动打包脚本流程"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#自动打包脚本流程"}},[t._v("#")]),t._v(" 自动打包脚本流程")]),t._v(" "),l("ul",[l("li",[l("ol",[l("li",[t._v("xcodebuild clean")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"2"}},[l("li",[t._v("xcodebuild archive")])])]),t._v(" "),l("li",[l("ol",{attrs:{start:"3"}},[l("li",[t._v("xcodebuild -exportArchive")])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);